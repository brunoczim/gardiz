var searchIndex = JSON.parse('{\
"gardiz":{"doc":"Library for 2D geometric spaces (AKA “the plane”). …","t":[0,0,0,0,0,0,0,0,18,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,16,8,16,16,10,10,10,10,11,10,10,11,13,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,18,3,3,4,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["axis","bits","coord","direc","graph","map","rect","set","ALL","Axis","Iter","X","Y","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","equivalent","fmt","fmt","fmt","from","from","hash","into","into","into_iter","iter","next","next_back","not","partial_cmp","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","CastSigned","CastUnsigned","Distance","ExcessToSigned","HalfExcess","Output","SignedToExcess","Target","Target","cast_signed","cast_unsigned","distance","excess_to_signed","half_exc_to_signed","half_excess","signed_to_excess","signed_to_half_exc","BadCoord","FromStrRadixErr","MissingSep","Vec2","abs","abs_sub","add","add","add_assign","add_assign","as_mut","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_signed","cast_unsigned","center_origin","center_origin_at","checked_add","checked_div","checked_dot","checked_int_mag","checked_mag","checked_move","checked_move_by","checked_mul","checked_neg","checked_rem","checked_sqr_mag","checked_sub","clone","clone","clone_into","clone_into","cloned","cmp","copied","default","direction_to","distance","div","div","div_assign","div_assign","dot","dot_ref","eq","equivalent","excess_to_signed","flip_y","fmt","fmt","fmt","fold","fold_rev","from","from","from","from","from_axes","from_str_radix","half_excess","hash","index","index_mut","int_magnitude","int_magnitude_ref","into","into","into_borrow","into_borrow_mut","is_negative","is_positive","is_zero","magnitude","magnitude_ref","map","map_with_axes","max_value","min_value","move_by","move_one","mul","mul","mul_assign","mul_assign","ne","neg","not","one","partial_cmp","pow","pow","rem","rem","rem_assign","rem_assign","saturating_add","saturating_dot","saturating_int_mag","saturating_mag","saturating_move","saturating_move_by","saturating_mul","saturating_sqr_mag","saturating_sub","set_one","set_zero","signum","sqr_magnitude","sqr_magnitude_ref","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_string","transpose","transpose_err_x","transpose_err_y","try_from","try_from","try_into","try_into","type_id","type_id","wrapping_add","wrapping_dot","wrapping_int_mag","wrapping_mag","wrapping_move","wrapping_move_by","wrapping_mul","wrapping_neg","wrapping_sqr_mag","wrapping_sub","x","y","zero","zip","zip_with","ALL","DirecMap","DirecVector","Direction","Down","Iter","Left","Right","Up","axis","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","direction","down","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_axis_neg","from_axis_pos","from_direcs","hash","hash","hash","index","index_mut","into","into","into","into","into_iter","iter","left","magnitude","ne","ne","next","next_back","not","partial_cmp","partial_cmp","right","rotate_clockwise","rotate_countercw","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","up","Components","Connections","Graph","PathMakerBuf","VertexEdges","are_connected","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","components","connect","connected_at","connections","create_vertex","default","default","disconnect","eq","eq","equivalent","equivalent","extend_edges","extend_vertices","fmt","fmt","fmt","fmt","from","from","from","from","from_vertices","from_verts_and_edges","into","into","into","into","into_iter","into_iter","make_path","make_path","ne","ne","new","new","next","next","remove_vertex","remove_with_edges","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vertex_edges","vertices_edges","Columns","Map","Neighbours","Rows","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","columns","contains","create","default","eq","equivalent","extend","first_neighbour","first_neighbour_data","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","get","insert","into","into","into","into","into_iter","into_iter","into_iter","is_empty","last_neighbour","last_neighbour_data","neighbours","neighbours_incl","new","next","next","next","next_back","next_back","next_back","remove","rows","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","Borders","Columns","Rect","Rows","borders","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_end","checked_end_incl","checked_overlapped","clone","clone_into","cmp","columns","default","end","end_incl_ref","end_inclusive","end_non_empty","end_non_empty_ref","end_ref","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_range","from_range_incl","has_point","hash","into","into","into","into","into_iter","into_iter","into_iter","is_empty","ne","next","next","next","next_back","next_back","overlapped","overlaps","partial_cmp","rows","saturating_end","saturating_end_incl","saturating_overlapped","size","start","to_owned","try_from","try_from","try_from","try_from","try_from_range","try_from_range_incl","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrapping_end","wrapping_end_incl","wrapping_overlapped","Columns","Neighbours","Rows","Set","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","columns","contains","default","eq","equivalent","extend","first_neighbour","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","insert","into","into","into","into","into_iter","into_iter","into_iter","is_empty","last_neighbour","ne","neighbours","neighbours_incl","new","next","next","next","next_back","next_back","next_back","remove","rows","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["gardiz","","","","","","","","gardiz::axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gardiz::bits","","","","","","","","","","","","","","","","","gardiz::coord","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gardiz::direc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gardiz::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gardiz::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gardiz::rect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gardiz::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Utilites related to the axes of a plane.","A collection of traits related to manipulating integer …","Utilites related to coordinates.","Utilities related to directions in the plane.","A simple graph of points in a plane.","A map from coordinates/vectors to arbitrary data, …","This module exports rectangle utilities.","A set of coordinates/vectors in a plane optimized for the …","List of all possible axes. Please note that this requires …","The axes of a plane.","Iterator over all axes. See [<code>Axis::iter</code>].","The X axis (changes horizontally).","The Y axis (changes vertically).","","","","","","","","","","","","","","","","","","","","","Iterator over all axes.","","","","","","","","","","","","","","","Trait for bit-casts from unsigned integers to 2’s …","Trait for bit-casts from 2’s complement signed integers …","Trait for computing absolute distance between two …","Trait for converting unsigned numbers into signed …","Trait for getting the “excess” that is the half of an …","Output number type.","Trait for converting signed numbers into unsigned …","Type of the target signed version.","Type of the target unsigned version.","Bit-casts the given (<code>self</code>) unsigned number into a signed …","Bit-casts the given (<code>self</code>) signed number into an unsigned …","Computes the absolute (without sign) distance between the …","Performs a conversion from an “excess of N” number to …","Performs a conversion from an “excess of N” number to …","Gets the “excess” that is the half of the maximum …","Performs a conversion from a 2’s complement number into …","Performs a conversion from a 2’s complement number into …","A coordinate could not be parsed correctly as an internal …","Error when parsing from string.","Thrown when a missing comma is found.","Generic 2D vector. It could be a coordinate, it could be …","","","","","","","Maps coordinates to mutable references.","Maps coordinates to references.","","Borrows each coordinate.","","","Borrows each coordinate as mutable references.","","","","Useful for showing unsigned coordinates to humans, when …","Useful for showing unsigned coordinates to humans, when …","","","Computes the dot product of the vector, returning <code>None</code> if …","Computes the magnitude of the vector truncated (as an …","Computes the magnitude of a float vector returning <code>None</code> …","Moves this vector in the given direction by one, …","Moves this vector in the given direction by the given …","","","","Computes the square of the magnitude of the vector, …","","","","","","Clones every coordinate.","","Copies every coordinate.","","Returns a “straight” direction into another point. …","","","","","","Computes the dot product of the vector, i.e. …","Computes the dot product of the vector, by reference.","","","","Useful for showing signed coordinates to humans, when the …","","","","Performs a fold/reduce: i.e. accumulates the coordinates …","Performs a fold/reduce: i.e. accumulates the coordinates …","","","","","Creates a vector from a function over axis to data.","","","","","","Computes the magnitude of the vector truncated (as an …","Computes the magnitude of the vector truncated (as an …","","","Borrows each coordinate.","Borrows each coordinate as mutable references.","","","","Computes the magnitude of a float vector. The formula is …","Computes the magnitude of a float vector by reference.","Maps each coordinate to a given value and builds a new …","Maps each coordinate to a given value in a new vector, …","","","Moves this vector in the given direction by the given …","Moves this vector in the given direction by one.","","","","","","","","","","","","","","","","","Computes the dot product of the vector, saturating when …","Computes the magnitude of the vector truncated (as an …","Computes the magnitude of a float vector saturating on …","Moves this vector in the given direction by one, …","Moves this vector in the given direction by the given …","","Computes the square of the magnitude of the vector, …","","","","","Computes the square of the magnitude of the vector. The …","Computes the square of the magnitude of the vector by …","","","","","","","","Transpose a vector of options into an option of vectors: …","Transpose a vector of <code>Result</code> into a <code>Result</code> of vectors: a …","Transpose a vector of <code>Result</code> into a <code>Result</code> of vectors: a …","","","","","","","","Computes the dot product of the vector, wrapping around …","Computes the magnitude of the vector truncated (as an …","Computes the magnitude of a float vector wrapping around …","Moves this vector in the given direction by one, wrapping …","Moves this vector in the given direction by the given …","","","Computes the square of the magnitude of the vector, …","","Value of the X-coordinate.","Value of the Y-coordinate.","","Zips two vectors into a vector of tuples. The result is:","Zips two vectors using a zipper function <code>f</code>. The result is:","List of all possible directions. Please note that this …","A mapping from all directions to the given data.","A vector written as a magnitude and a direction.","Basic direction in a plane.","Direction down (towards positive Y).","Iterator over all “straight” 2D directions. See […","Direction left (towards negative X).","Direction right (towards positive X).","Direction up (towards negative Y).","Axis on which the direciton varies.","","","","","","","","","","","","","","","","","","","Direction of the vector.","Data associated with <code>Direction::Down</code>.","","","","","","","","","","","","","","","Creates a direction from the given axis in the negative …","Creates a direction from the given axis in the positive …","Creates a mapping from a function.","","","","","","","","","","","Iterator over all directions.","Data associated with <code>Direction::Left</code>.","Mangitude, should be numeric.","","","","","","","","Data associated with <code>Direction::Right</code>.","Rotates the direction clockwise.","Rotates the direction counter-clockwise.","","","","","","","","","","","","","","","","","","Data associated with <code>Direction::Up</code>.","Iterator over connected components of the graph. See […","Iterator over the connections of this graph pairs of …","A simple graph of points in a plane. Being simple means …","A buffer for an A* search algorithm useful for saving a …","The vertices_edges of a vertex. More specifically, at …","Tests if the given two vertices are connected.","","","","","","","","","","","","","","","","","Creates iterator over connected components of the graph. …","Connects the given two vertices and returns if they were …","Gets the vertex connected with the given vertex in the …","Iterator over the connections of this graph: pairs of …","Creates a new vertex in the graph (without creating …","","","Disconnects the given two vertices and returns if they …","","","","","Extends the graph edge list from a list of vertices-pair …","Extend the set of vertices from a given list of vertices, …","","","","","","","","","Creates the graph from a list of vertices (and no …","Creates the graph from a list of vertices (and list of …","","","","","","","Makes a path from the given starting point till the “…","Performs the A* search algorithm using this buffer. See […","","","Creates a new empty graph.","Creates a new empty path maker buffer.","","","Removes a vertex but attempts to connect vertices_edges …","Removes a vertex and all its vertices_edges. Returns if …","","","","","","","","","","","","","","","","","Gets the edge flags of the given vertex, the vertex is in …","Returns the underlying map of vertices to edge flags.","Iterator over entries of a map in the direction of …","Map of coordinates in a plane to arbitrary data. …","Iterator over the neighbours of a point in a map. See […","Iterator over entries of a map in the direction of rows. …","","","","","","","","","","","","","","","","","Returns an iterator over all entries, by running through …","Tests if the map contains the given point.","Creates an entry at the given point with its associated …","","","","","Returns the nearest neighbour in a straight line of a …","Returns the nearest neighbour in a straight line of a …","","","","","","","","","","Attempts to get the data associated with the given point.","Inserts the given point with its associated data. A …","","","","","","","","Returns whether the map is empty.","Returns the furthest neighbour in a straight line of a …","Returns the furthest neighbour in a straight line of a …","Returns an iterator to the neighbours of a given point in …","Returns an iterator to the neighbours of a given point in …","Creates a new empty coordinate map.","","","","","","","Removes the given point entry from the from the map. …","Returns an iterator over all entries, by running through …","","","","","","","","","","","","","","","","","Updates an existing point’s entry with the given value. …","Iterator over inner borders of the rectangle. See […","Iterator over columns of the rectangle. See [<code>Rect::columns</code>…","A rectangle in a plane.","Iterator over rows of the rectangle. See [<code>Rect::rows</code>].","Iterator over the inner borders of this rectangle.","","","","","","","","","Returns coordinates one unit past the end (bottom-right), …","Returns the last coordinates (bottom-right) of the …","Computes overlapped area between two rectangles, …","","","","Iterator over all coordinates of this rectangle in the …","","Returns coordinates one unit past the end (bottom-right) …","Returns the last coordinates (bottom-right) of the …","Returns the last coordinates (bottom-right) of the …","Returns last included coordinates of the rectangle …","Returns last included coordinates of the rectangle …","Returns coordinates one unit past the end (bottom-right), …","","","","","","","","","","","Builds the rectangle from the given range <code>start .. end</code> …","Builds the rectangle from the given inclusive range …","Tests whether a given point is inside the rectangle.","","","","","","","","","Returns whether the rectangle is empty (i.e. size is …","","","","","","","Computes the overlapped area between two rectangles. An …","Tests whether two rectangles overlap in area.","","Iterator over all coordinates of this rectangle in the …","Returns coordinates one unit past the end (bottom-right), …","Returns the last coordinates (bottom-right) of the …","Computes overlapped area between two rectangles, …","Size at each dimension.","Starting top-left point.","","","","","","Tries to make a rectangle from a given range (end …","Tries to make a rectangle from a given range (end …","","","","","","","","","Returns coordinates one unit past the end (bottom-right), …","Returns the last coordinates (bottom-right) of the …","Computes overlapped area between two rectangles, wrapping …","Iterator over the points of a set in the direction of …","Iterator over the neighbours of a given point in a given …","Iterator over the points of a set in the direction of …","The set of coordinates/vectors in a plane, optimized for …","","","","","","","","","","","","","","","","","Returns an iterator over all the points in the set, in …","Tests if the set contains a given point.","","","","","Returns the nearest neighbour in a straight line of a …","","","","","","","","","","Inserts the given point in the set. Returns whether the …","","","","","","","","Tests if the set is emtpy.","Returns the furthest neighbour in a straight line of a …","","Returns an iterator to the neighbours of a given point in …","Returns an iterator to the neighbours of a given point in …","Creates a new empty set.","","","","","","","Removes a point from the set. Returns whether the removal …","Returns an iterator over all the points in the set, in …","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,0,0,1,1,1,2,1,2,1,2,1,2,1,1,1,1,1,2,1,2,1,1,2,2,1,2,2,1,1,2,1,2,1,1,2,1,2,1,2,0,0,0,0,0,3,0,4,5,4,5,3,6,6,7,8,8,9,0,9,0,10,10,10,10,10,10,10,10,10,10,9,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,0,0,0,11,0,11,11,11,11,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,13,13,14,11,13,14,11,13,14,11,12,13,14,11,12,13,14,11,11,14,11,13,14,14,14,11,12,13,14,12,11,14,13,13,14,12,12,11,11,13,14,11,11,12,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,14,0,0,0,0,0,15,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,15,15,15,15,15,16,15,15,16,15,16,15,15,15,16,17,18,15,16,17,18,15,15,15,16,17,18,17,18,15,16,15,16,15,16,17,18,15,15,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,15,0,0,0,0,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,19,19,19,19,19,19,19,19,19,20,21,22,19,20,21,22,19,19,19,19,20,21,22,20,21,22,19,19,19,19,19,19,20,21,22,20,21,22,19,19,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,0,0,0,0,23,23,24,25,26,23,24,25,26,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,25,26,23,24,25,26,23,23,23,23,23,24,25,26,24,25,26,23,23,24,25,26,24,25,23,23,23,23,23,23,23,23,23,23,23,24,25,26,23,23,23,24,25,26,23,24,25,26,23,23,23,0,0,0,0,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,27,27,27,27,27,27,27,28,29,30,27,28,29,30,27,27,27,28,29,30,28,29,30,27,27,27,27,27,27,28,29,30,28,29,30,27,27,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["axis",4]],[[],["iter",3]],[[]],[[]],[[["axis",4]],["ordering",4]],[[["axis",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[]],[[["axis",4]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[],["vec2",3]],[[],["vec2",3]],[[]],[[],["vec2",3]],[[]],[[]],[[],["vec2",3]],[[]],[[]],[[]],[[],["vec2",3]],[[["vec2",3]],["vec2",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["direction",4]],["option",4]],[[["direcvector",3]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["vec2",3]],[[],["fromstrradixerr",4]],[[]],[[]],[[],["vec2",3]],[[["vec2",3]],["ordering",4]],[[],["vec2",3]],[[],["vec2",3]],[[],[["option",4],["direction",4]]],[[]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]],["bool",15]],[[],["bool",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["vec2",3]]],[[["vec2",3]]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],[[]],[[]],[[["axis",4]]],[[["axis",4]]],[[]],[[]],[[]],[[]],[[],["vec2",3]],[[],["vec2",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["vec2",3]],[[],["vec2",3]],[[]],[[]],[[["direcvector",3]]],[[["direction",4]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]],["bool",15]],[[]],[[]],[[]],[[["vec2",3]],[["option",4],["ordering",4]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[]],[[]],[[]],[[]],[[["direction",4]]],[[["direcvector",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec2",3]]],[[]],[[]],[[],["string",3]],[[],[["vec2",3],["option",4]]],[[],[["result",4],["vec2",3]]],[[],[["result",4],["vec2",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[["direction",4]]],[[["direcvector",3]]],[[]],[[]],[[]],[[]],null,null,[[]],[[["vec2",3]],["vec2",3]],[[["vec2",3]],["vec2",3]],null,null,null,null,null,null,null,null,null,[[],["axis",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["direction",4]],[[],["iter",3]],[[],["direcvector",3]],[[],["direcmap",3]],[[]],[[]],[[]],[[]],[[["direction",4]],["ordering",4]],[[["direcvector",3]],["ordering",4]],null,null,[[["direction",4]],["bool",15]],[[["direcvector",3]],["bool",15]],[[["direcmap",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["axis",4]]],[[["axis",4]]],[[]],[[]],[[]],[[]],[[["direction",4]]],[[["direction",4]]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],null,null,[[["direcvector",3]],["bool",15]],[[["direcmap",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[]],[[["direction",4]],[["option",4],["ordering",4]]],[[["direcvector",3]],[["option",4],["ordering",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[["vec2",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["graph",3]],[[],["pathmakerbuf",3]],[[],["connections",3]],[[],["components",3]],[[]],[[]],[[]],[[]],[[],["components",3]],[[["vec2",3]],["bool",15]],[[["vec2",3],["direction",4]],[["vec2",3],["option",4]]],[[],["connections",3]],[[["vec2",3]],["bool",15]],[[]],[[]],[[["vec2",3]],["bool",15]],[[["graph",3]],["bool",15]],[[["pathmakerbuf",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec2",3]],[["vec",3],["option",4]]],[[["vec2",3],["graph",3]],[["vec",3],["option",4]]],[[["graph",3]],["bool",15]],[[["pathmakerbuf",3]],["bool",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["vec2",3]],["bool",15]],[[["vec2",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec2",3]],[["vertexedges",6],["option",4]]],[[],["map",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["map",3]],[[],["neighbours",3]],[[],["rows",3]],[[],["columns",3]],[[]],[[]],[[]],[[]],[[],["columns",3]],[[["vec2",3]],["bool",15]],[[["vec2",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["vec2",3],["direction",4]],[["vec2",3],["option",4]]],[[["vec2",3],["direction",4]],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["vec2",3]],["option",4]],[[["vec2",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["vec2",3],["direction",4]],[["vec2",3],["option",4]]],[[["vec2",3],["direction",4]],["option",4]],[[["vec2",3],["direction",4]],["neighbours",3]],[[["vec2",3],["direction",4]],["neighbours",3]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["vec2",3]],["option",4]],[[],["rows",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec2",3]],["result",4]],null,null,null,null,[[],["borders",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec2",3],["option",4]]],[[],[["vec2",3],["option",4]]],[[],["option",4]],[[],["rect",3]],[[]],[[["rect",3]],["ordering",4]],[[],["columns",3]],[[],["rect",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],[["option",4],["vec2",3]]],[[],[["option",4],["vec2",3]]],[[],["vec2",3]],[[["rect",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["vec2",3],["vec2",3]]],[[["vec2",3]]],[[["vec2",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["rect",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["rect",3]],[[],["bool",15]],[[["rect",3]],[["option",4],["ordering",4]]],[[],["rows",3]],[[],["vec2",3]],[[],["vec2",3]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec2",3]],["option",4]],[[["vec2",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["vec2",3]],[[],["vec2",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["set",3]],[[],["neighbours",3]],[[],["rows",3]],[[],["columns",3]],[[]],[[]],[[]],[[]],[[],["columns",3]],[[["vec2",3]],["bool",15]],[[]],[[["set",3]],["bool",15]],[[],["bool",15]],[[]],[[["vec2",3],["direction",4]],[["vec2",3],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["vec2",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["vec2",3],["direction",4]],[["vec2",3],["option",4]]],[[["set",3]],["bool",15]],[[["vec2",3],["direction",4]],["neighbours",3]],[[["vec2",3],["direction",4]],["neighbours",3]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["vec2",3]],["bool",15]],[[],["rows",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Axis"],[3,"Iter"],[8,"Distance"],[8,"CastSigned"],[8,"CastUnsigned"],[8,"ExcessToSigned"],[8,"HalfExcess"],[8,"SignedToExcess"],[4,"FromStrRadixErr"],[3,"Vec2"],[4,"Direction"],[3,"Iter"],[3,"DirecVector"],[3,"DirecMap"],[3,"Graph"],[3,"PathMakerBuf"],[3,"Connections"],[3,"Components"],[3,"Map"],[3,"Neighbours"],[3,"Rows"],[3,"Columns"],[3,"Rect"],[3,"Columns"],[3,"Rows"],[3,"Borders"],[3,"Set"],[3,"Neighbours"],[3,"Rows"],[3,"Columns"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","tn":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","ne","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","HashMap","IntoIter","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","is_empty","iter","iter_mut","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry_with","replace_entry_with","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Difference","Drain","DrainFilter","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","intersection","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","remove","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Bucket","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","default","drain","drain_iter_from","drop","drop","drop","drop","erase","erase_entry","erase_no_drop","find","from","from","from","from","from","from","get","get_mut","insert","insert_entry","insert_no_grow","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","iter","iter","iter","iter_hash","len","new","new_in","next","next","next","next","read","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_no_grow","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_maphashbrown::hash_sethashbrown::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the …","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","","","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the …","Creates an empty <code>HashMap<K, V, S, A></code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","","Creates a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s …","Set the value of an entry with a custom hasher function.","","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns…","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value in the set, if any, that …","Inserts the given <code>value</code> into the set if it is not …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Visits the values representing the intersection, i.e., …","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Removes a value from the set. Returns whether the value …","Adds a value to the set, replacing the existing value, if …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","A reference to a hash table bucket containing a <code>T</code>.","Iterator which consumes elements without freeing the …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","","Returns pointer to one past last element of data table.","","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it …","Erases an element from the table without dropping it.","Searches for an element in the table.","","","","","","","Gets a reference to an element in the table.","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, without growing the …","","","","","","","","","","","","Returns an iterator which consumes all elements from the …","Returns an iterator over every element in the table. It …","","","Returns an iterator over occupied buckets that could …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","Creates a new empty hash table without allocating any …","","","","","","Refresh the iterator so that it reflects an insertion …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","Attempts to insert a new element without growing the …","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least …","Attempts to allocate a new hash table using the given …","","","","","","","Allocates a new hash table with at least enough capacity …","Allocates a new hash table using the given allocator, …",""],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,2,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,3,4,0,0,0,3,4,3,4,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,6,6,7,10,11,6,6,7,10,11,6,6,6,6,13,6,21,6,6,6,6,7,8,9,10,11,12,14,15,3,16,17,18,4,19,20,21,21,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,15,18,6,15,18,15,18,6,16,19,6,16,6,16,6,16,19,6,6,6,3,16,17,4,19,20,17,16,17,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,7,8,9,10,11,12,13,14,16,20,16,16,19,6,6,6,16,4,19,20,16,6,6,7,8,9,10,11,12,14,7,8,9,10,11,12,13,14,4,3,4,3,4,4,6,6,6,16,19,6,16,19,19,16,19,19,6,6,6,6,7,8,9,10,11,12,13,14,6,7,10,11,21,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,21,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,22,23,24,25,26,27,28,29,30,22,23,24,25,26,27,28,29,30,22,22,22,23,27,28,29,30,22,22,23,27,28,29,30,22,22,22,22,22,26,22,22,22,22,23,24,25,27,28,29,30,22,22,23,24,25,26,27,28,29,30,22,22,22,22,22,22,22,22,22,23,24,25,26,27,28,29,30,22,23,24,25,26,27,28,29,30,22,22,22,22,22,22,23,24,25,23,24,25,26,27,28,29,30,22,22,22,22,22,22,23,24,25,26,27,28,29,30,22,22,22,23,27,28,29,30,22,23,24,25,26,27,28,29,30,22,23,24,25,26,27,28,29,30,22,22,23,24,25,26,27,28,29,30,22,22,22,22,22,0,0,0,0,0,0,31,31,31,31,32,33,34,35,36,31,32,33,34,35,36,32,32,32,32,32,32,31,32,33,32,32,31,32,33,31,32,32,32,32,31,32,34,35,32,32,32,32,31,32,33,34,35,36,32,32,32,32,32,31,32,33,34,35,36,32,33,34,35,36,32,32,34,35,32,32,32,32,33,34,35,36,31,33,33,32,32,32,32,32,33,34,35,31,32,33,31,32,33,34,35,36,32,31,32,33,34,35,36,32,32,32,31,32,33,34,35,36,32,32,31],"f":[null,null,null,null,null,[[]],[[]],[[],["tryreserveerror",4]],[[]],[[["tryreserveerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[["tryreserveerror",4]],["bool",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["entry",4]],null,[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[["intoiterator",8]]],[[],["rawentrymut",4]],[[],["option",4]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["rawoccupiedentrymut",3]],[[]],[[]],[[],["occupiedentry",3]],[[]],[[]],[[["u64",15]]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[]],[[]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[],["rawentrybuilder",3]],[[],["rawentrybuildermut",3]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["rawentrymut",4]],[[],["entry",4]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["occupiederror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["difference",3]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["hashmap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["union",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bucket",3]],[[["bucket",3]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nonnull",3]],[[]],[[],["rawdrain",3]],[[["rawiter",3]],["rawdrain",3]],[[]],[[]],[[]],[[]],[[["bucket",3]]],[[["u64",15]],["bool",15]],[[["bucket",3]]],[[["u64",15]],[["option",4],["bucket",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["bucket",3]],[[["u64",15]]],[[["u64",15]],["bucket",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawintoiter",3]],[[]],[[]],[[]],[[]],[[["rawiter",3]],["rawintoiter",3]],[[],["rawiter",3]],[[],["rawiter",3]],[[],["rawiter",3]],[[["u64",15]],["rawiterhash",3]],[[],["usize",15]],[[]],[[]],[[],[["option",4],["bucket",3]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["bucket",3]]],[[]],[[["bucket",3]]],[[["bucket",3]]],[[["bucket",3]]],[[["u64",15]],["option",4]],[[["bucket",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["bucket",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[["usize",15]]],[[]]],"p":[[4,"TryReserveError"],[13,"AllocError"],[4,"RawEntryMut"],[4,"Entry"],[4,"DefaultHashBuilder"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"OccupiedError"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Bucket"],[3,"RawTable"],[3,"RawIter"],[3,"RawIntoIter"],[3,"RawDrain"],[3,"RawIterHash"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":[8,10,14,14,0,0,3,4,3,3,3,3,16,3,8,13,3,13,3,16,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equivalent","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","default","drain","entry","eq","extend","extend","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_index_of","get_key_value","get_mut","get_mut","hasher","index","index","index","index","index","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","or_default","or_insert","or_insert_with","or_insert_with_key","pop","remove","remove","remove_entry","remove_entry","reserve","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sorted_by","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","extend","extend","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index_of","hasher","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","last","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","pop","remove","replace","reserve","retain","reverse","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sorted_by","split_off","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["indexmap","","","","","","indexmap::mapindexmap::setd":["Key equivalence trait.","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part …","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","","","","","","","Create an <code>IndexMap</code> from the sequence of key-value pairs …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, …","Gets a mutable reference to the entry’s value in the …","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be …","Returns a reference to the value corresponding to the …","Returns a reference to the value at the supplied <code>index</code>.","Returns a mutable reference to the value at the supplied …","Returns a mutable reference to the value corresponding to …","Sets the value of the entry to <code>value</code>, and returns the …","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","","","","","","","","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Converts into a mutable reference to the entry’s value …","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, …","Return an iterator over the key-value pairs of the map, …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map, in their …","Get the last key-value pair","","","","","","","","Get the last key-value pair, with mutable access to the …","Return the number of key-value pairs in the map.","","","","","","","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if …","Inserts the result of the <code>call</code> function with a reference …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep …","Scan through each key-value pair in the map and keep …","","Reverses the order of the map’s key-value pairs in …","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map as much as possible.","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by value …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","Get the first value","","","","","","","","","","","","","","","","","","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return item index, if it exists in the set","Return a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in …","Returns <code>true</code> if all elements of <code>other</code> are contained in …","Return an iterator over the values of the set, in their …","Get the last value","","","","Return the number of elements in the set.","","","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Scan through each value in the set and keep those where …","Reverses the order of the set’s values in place.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by value iterator …","Splits the collection into two at the given index.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>"],"i":[0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,3,0,3,0,2,0,0,2,4,3,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,4,4,4,7,8,10,4,4,7,8,10,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,4,4,4,4,4,4,4,4,5,3,6,4,7,8,10,12,5,3,6,4,7,8,9,10,11,12,13,4,5,4,4,4,2,4,4,4,4,4,5,4,4,5,3,6,4,4,4,4,5,6,4,4,5,3,6,4,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,6,5,4,4,4,5,3,6,4,4,7,8,9,10,11,12,13,4,4,7,8,9,10,11,12,4,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,3,3,3,3,4,5,4,5,4,4,4,2,4,4,5,4,5,4,4,4,4,7,8,9,10,11,12,13,4,4,4,4,4,5,4,5,4,4,4,4,7,8,10,4,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,4,4,4,4,4,0,0,0,0,0,0,0,0,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,16,18,19,20,21,14,14,16,18,19,20,21,15,16,17,14,15,16,17,14,14,14,14,14,14,14,14,15,16,18,19,20,21,20,21,14,15,16,17,18,19,20,21,14,14,14,14,14,14,14,14,14,14,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,14,14,14,15,16,17,14,15,16,14,15,16,17,18,19,20,21,15,16,17,18,19,20,21,15,16,17,14,14,14,14,14,14,14,14,14,14,14,15,16,17,18,19,20,21,14,14,14,14,14,14,14,14,14,14,14,14,16,18,19,20,21,14,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,14],"f":[null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],[[],["privatemarker",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["drain",3]],[[],["entry",4]],[[["indexmap",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["usize",15]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[],["keys",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["indexset",3]],["difference",3]],[[],["drain",3]],[[["indexset",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["usize",15]]],[[]],[[["usize",15]]],[[],["bool",15]],[[]],[[["indexset",3]],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["indexset",3]],["bool",15]],[[],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["indexset",3]],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["indexset",3]],["union",3]],[[["usize",15]]],[[["usize",15]]],[[]]],"p":[[8,"Equivalent"],[8,"MutableKeys"],[4,"Entry"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"IndexSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","t":[3,6,3,8,8,8,8,8,3,8,8,16,8,8,8,8,8,6,6,6,8,8,8,8,8,5,10,10,11,5,10,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,10,11,11,11,11,11,10,10,11,11,11,10,11,11,11,10,11,11,11,5,10,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,0,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,12,10,0,10,11,11,11,11,11,11,10,11,11,10,11,10,11,10,11,11,10,11,10,11,10,11,10,11,11,11,11,11,11,10,11,10,10,10,11,11,11,0,11,11,11,11,11,10,11,11,10,10,11,10,10,11,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,0,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,5,5,5,5,0,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,5,10,10,11,10,11,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,5,10,11,11,11,3,3,13,13,3,13,4,8,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,3,6,6,3,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,5,5,10,6,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,8,10,13,10,10,10,10,10,10,10,10,10,8,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,0,0,5,10,10,10,10,10,10,5,10,10,10,10,5,5,5,10,10,10,10,10,11,10,10,10,0,10,11,11,11,10,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,10,11,11,10,0,10,0,10,11,11,10,10,10,10,10,10,11,10,10,10,10,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,0,0,5,10,10,10,10,0,10,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,5,10,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["BigInt","BigRational","BigUint","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedSub","Complex","Float","FromPrimitive","FromStrRadixErr","Integer","Num","NumCast","One","PrimInt","Rational","Rational32","Rational64","Saturating","Signed","ToPrimitive","Unsigned","Zero","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","arg","as_","asin","asin","asinh","asinh","assign_from_slice","assign_from_slice","atan","atan","atan2","atanh","atanh","average_ceil","average_ceil","average_floor","average_floor","bigint","bit","bit","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","ceil","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_mul","checked_pow","checked_sub","checked_sub","checked_sub","checked_sub","clamp","classify","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","complex","conj","cos","cos","cosh","cosh","count_ones","count_ones","count_zeros","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_ceil","div_floor","div_floor","div_floor","div_mod_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem","divides","divides","divides","epsilon","eq","eq","eq","exp","exp","exp2","exp_m1","expf","extended_gcd","extended_gcd_lcm","extended_gcd_lcm","fdiv","finv","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_le","from_polar","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","gcd","gcd","gcd","gcd_lcm","gcd_lcm","gcd_lcm","hash","hash","hash","hypot","i","im","infinity","integer","integer_decode","into","into","into","into_parts","inv","inv","is_even","is_even","is_even","is_finite","is_finite","is_infinite","is_infinite","is_multiple_of","is_multiple_of","is_multiple_of","is_nan","is_nan","is_negative","is_negative","is_normal","is_normal","is_odd","is_odd","is_odd","is_one","is_one","is_one","is_one","is_positive","is_positive","is_sign_negative","is_sign_positive","is_zero","is_zero","is_zero","is_zero","iter","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","l1_norm","lcm","lcm","lcm","leading_zeros","ln","ln","ln_1p","log","log","log10","log2","magnitude","max","max_value","max_value","min","min_positive_value","min_value","min_value","mod_floor","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nan","ne","neg","neg","neg_infinity","neg_zero","new","new","new","next_multiple_of","next_multiple_of","next_multiple_of","norm","norm_sqr","not","nth_root","nth_root","nth_root","nth_root","one","one","one","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powf","powf","powi","powi","powu","prev_multiple_of","prev_multiple_of","prev_multiple_of","product","product","product","product","range","range_inclusive","range_step","range_step_inclusive","rational","re","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate_left","rotate_right","round","saturating_add","saturating_sub","scale","set_bit","set_bit","set_one","set_one","set_one","set_one","set_zero","set_zero","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signed_shl","signed_shr","signum","signum","signum","signum","sin","sin","sin_cos","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","swap_bytes","tan","tan","tanh","tanh","to_be","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_degrees","to_f32","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_le","to_owned","to_owned","to_owned","to_polar","to_radians","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64","to_u64","to_u64_digits","to_u64_digits","to_u8","to_u8","to_usize","to_usize","trailing_ones","trailing_zeros","trailing_zeros","trailing_zeros","traits","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unscale","unsigned_shl","unsigned_shr","zero","zero","zero","zero","zero","BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","count","count","description","description","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","into_iter","into_iter","into_original","last","last","len","len","mul","ne","ne","neg","next","next","nth","partial_cmp","size_hint","size_hint","to_bigint","to_biguint","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","Complex","Complex32","Complex64","ParseComplexError","borrow","borrow_mut","description","eq","fmt","fmt","from","im","into","ne","re","to_string","try_from","try_into","type_id","Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Output","Pow","checked_pow","pow","pow","BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","description","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","cos","cosh","count_ones","count_zeros","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_zero","kind","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::complex","","","","","","","","","","","","","","","","","","","num::integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::pow","","","","","num::rationalnum::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::bounds","","","num::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::identities","","","","","","","","","","num::traits::int","","","","","","","","","","","","","","","","","num::traits::ops","","","","","","num::traits::ops::checked","","","","","","","","","","","","","","","","num::traits::ops::inv","","","num::traits::ops::mul_add","","","","","num::traits::ops::overflowing","","","","","","num::traits::ops::saturating","","","","","","","","","num::traits::ops::wrapping","","","","","","","","","","","","num::traits::pow","","","","","num::traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::sign","","","","","","","","",""],"d":["A big signed integer type.","Alias for arbitrary precision rationals.","A big unsigned integer type.","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs subtraction that returns <code>None</code> instead of …","A complex number in Cartesian form.","Generic trait for floating point numbers","A generic trait for converting a number to a value.","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","An interface for casting between machine scalars.","Defines a multiplicative identity element for <code>Self</code>.","Generic trait for primitive integers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Useful functions for signed numbers (i.e. numbers that …","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","","Computes the arccosine of a number. Return value is in …","Computes the principal value of the inverse cosine of <code>self</code>…","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the principal Arg of self.","","Computes the arcsine of a number. Return value is in …","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","Computes the principal value of inverse hyperbolic sine …","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Computes the arctangent of a number. Return value is in …","Computes the principal value of the inverse tangent of …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic …","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>…","Determines the fewest bits necessary to express the …","","","","","","","","","","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","","Returns the truncated principal cube root of <code>self</code> – see …","Returns the truncated principal cube root of <code>self</code> – see …","","Computes the principal value of the cube root of <code>self</code>.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","","","","Divides two numbers, checking for underflow, overflow and …","","","","Multiplies two numbers, checking for underflow or …","","","","Raises a value to the power of exp, returning <code>None</code> if an …","Subtracts two numbers, checking for underflow. If …","","","","A value bounded by a minimum and a maximum","Returns the floating point category of the number. If …","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","Computes the cosine of a number (in radians).","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","Computes the hyperbolic cosine of <code>self</code>.","Returns the number of ones in the binary representation …","Returns the number of one bits.","Returns the number of zeros in the binary representation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ceiled integer division.","Floored integer division.","","","","","Simultaneous floored integer division and modulus. …","Simultaneous truncated integer division and modulus. …","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Returns epsilon, a small positive value.","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Raises a floating point number to the complex power <code>self</code>.","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Greatest common divisor, least common multiple, and …","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","Returns the largest integer less than or equal to a …","","","","","","","","","","","","","","","","","","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","","","","","","","","","","","","","","","","","","","","","","","","","","Convert an integer from big endian to the target’s …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Converts a <code>f32</code> to return an optional value of this type. …","","","","Converts a <code>f64</code> to return an optional value of this type. …","","","","Converts an <code>i128</code> to return an optional value of this …","","Converts an <code>i16</code> to return an optional value of this type. …","","Converts an <code>i32</code> to return an optional value of this type. …","","Converts an <code>i64</code> to return an optional value of this type. …","","","","Converts an <code>i8</code> to return an optional value of this type. …","","Converts an <code>isize</code> to return an optional value of this …","","Convert an integer from little endian to the target’s …","Convert a polar representation into a complex number.","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in…","Creates and initializes a <code>BigInt</code> from an array of bytes …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Convert from a string and radix (typically <code>2..=36</code>).","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","Converts an <code>u128</code> to return an optional value of this …","","Converts an <code>u16</code> to return an optional value of this type. …","","Converts an <code>u32</code> to return an optional value of this type. …","","Converts an <code>u64</code> to return an optional value of this type. …","","","","Converts an <code>u8</code> to return an optional value of this type. …","","Converts a <code>usize</code> to return an optional value of this …","","Greatest Common Divisor (GCD).","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Calculate the length of the hypotenuse of a right-angle …","Returns imaginary unit","Imaginary portion of the complex number","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","","","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>1/self</code>","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","Checks if the given complex number is infinite","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Checks if the given complex number is NaN","Returns true if the number is negative and false if the …","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","Returns <code>true</code> if the number is odd.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","Returns true if the number is positive and false if the …","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","Lowest Common Multiple (LCM).","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Computes the principal value of natural logarithm of <code>self</code>.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","Returns the maximum of the two numbers.","returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Floored integer modulo, satisfying:","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaN</code> value.","","","","Returns the negative infinite value.","Returns <code>-0.0</code>.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","Create a new Complex","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","Raises <code>self</code> to a complex power.","Raise a number to a floating point power.","Raises <code>self</code> to a floating point power.","Raise a number to an integer power.","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the range [start, stop] by <code>step</code>. …","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Multiplies <code>self</code> by the scalar <code>t</code>.","Sets or clears the bit in the given position, using the …","Sets or clears the bit in the given position","","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</codeeturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","","Returns the truncated principal square root of <code>self</code> – …","Returns the truncated principal square root of <code>self</code> – …","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","Convert <code>self</code> to big endian from the target’s endianness.","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","Converts radians to degrees.","","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","","","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","","","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","","Convert <code>self</code> to little endian from the target’s …","","","","Convert to polar form (r, theta), such that …","Converts degrees to radians.","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in …","Returns the integer in the requested base in …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","","Returns the number of least-significant bits that are …","Returns the number of trailing zeros in the binary …","Returns the number of least-significant bits that are …","Returns the number of least-significant bits that are …","","Return the integer part of a number.","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","","A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the original value, if available. The value will …","","","","","","","","Negate Sign value.","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","Converts the value of <code>self</code> to a <code>BigUint</code>.","","","","","","","","","","","","","","","","","","","","","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","A complex number in Cartesian form.","","","","","","","","","","","Imaginary portion of the complex number","","","Real portion of the complex number","","","","","Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal <code>n</code>th root of an integer –…","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","","","An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Return Euler’s number.","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that …","Return the full circle constant <code>τ</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","","Returns the largest integer less than or equal to a …","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","","","Convert an integer from big endian to the target’s …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","","","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have…","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,2,3,4,2,5,2,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,5,5,2,5,2,5,4,6,2,5,2,2,5,4,6,4,6,0,4,6,4,4,6,6,4,4,6,6,4,4,6,6,4,4,6,6,4,6,4,4,6,6,4,4,6,6,4,6,5,4,6,5,0,0,2,4,4,6,6,5,2,7,4,4,6,8,4,4,6,9,4,4,6,0,10,4,4,6,0,2,4,6,5,4,6,4,6,5,4,6,0,5,2,5,2,5,11,6,11,4,6,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,4,6,12,12,4,6,4,6,12,12,4,6,12,4,6,2,4,6,5,2,5,2,2,5,12,4,12,5,5,2,4,4,4,4,4,4,6,6,6,6,6,6,5,5,5,5,5,5,5,5,2,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,5,5,5,5,11,4,4,6,4,6,14,5,4,6,14,5,4,6,14,5,14,5,14,5,14,4,6,5,14,5,14,5,11,5,4,6,4,6,4,4,4,6,4,6,5,1,4,6,5,4,6,14,5,14,5,14,5,14,4,6,5,14,5,14,5,12,4,6,4,6,12,4,6,5,2,5,5,2,0,2,4,6,5,4,5,5,12,4,6,2,5,2,5,12,4,6,2,5,3,4,2,5,12,4,6,4,6,15,5,3,4,2,2,16,4,6,5,0,4,6,4,6,5,12,4,6,11,2,5,2,2,5,2,2,4,2,17,2,2,2,17,2,12,4,6,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,2,5,4,5,2,2,4,6,5,4,6,12,5,5,4,4,4,6,6,0,15,4,6,5,4,6,4,6,0,0,11,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,2,5,2,5,5,4,6,12,4,6,5,5,0,0,0,0,0,5,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,11,11,2,18,18,5,4,6,4,6,15,5,4,6,16,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,11,11,0,2,3,4,2,5,2,2,5,2,4,4,6,6,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,4,6,5,5,11,2,5,2,5,11,4,6,4,4,6,4,6,4,6,2,4,6,19,5,4,6,19,5,4,6,19,5,19,5,19,5,19,4,6,5,19,5,19,5,11,4,6,5,5,2,4,6,4,6,4,4,4,6,4,6,5,4,6,19,5,19,5,19,5,4,6,19,4,6,5,4,6,19,5,19,5,6,11,4,6,0,2,4,6,6,6,6,6,6,6,6,6,5,4,6,5,4,6,5,5,11,11,0,16,4,6,5,0,0,20,20,0,20,0,0,0,0,0,0,21,22,20,23,24,21,22,20,23,24,20,23,24,20,23,24,20,21,22,23,24,20,23,24,20,23,23,24,24,21,22,20,23,24,20,21,22,20,23,24,21,22,24,21,22,21,22,20,23,24,20,21,22,22,20,21,22,25,26,20,23,24,23,24,21,22,20,23,24,21,22,20,23,24,21,22,20,23,24,0,0,0,0,27,0,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,28,28,28,28,28,28,28,5,28,28,5,28,28,28,28,0,0,0,0,0,0,29,0,29,0,30,31,30,31,0,32,31,31,0,12,0,12,0,12,0,12,12,31,12,12,31,30,31,0,12,31,0,12,30,31,30,12,12,12,0,12,0,12,0,31,30,30,12,0,32,12,0,32,31,30,31,30,31,30,31,31,31,0,0,0,0,0,0,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,0,0,0,0,0,0,33,34,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,39,0,0,0,39,0,0,0,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,41,40,41,40,40,40,40,40,40,41,40,41,40,40,41,40,40,40,40,40,40,40,40,40,41,40,40,40,40,40,40,40,40,40,41,41,40,40,40,40,41,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,40,41,40,40,40,40,41,40,41,40,41,40,0,0,0,0,0,0,0,0,0,0,42,43,42,42,42,42,42,42,42,42,42,0,0,0,0,1,0,43,42,42,42,42,42,42,0,0,0,0,0,0,0,0,0,0,44,45,39,42,0,0,0,0,42,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,2,3,0,2,3,2,2,27,2,2,2,2,2,43,46,43,46,0,0,0,2,2,7,8,9,47,0,48,49,50,10,0,0,0,2,2,2,11,11,2,2,2,2,0,2,43,46,46,2,13,43,46,11,14,14,14,14,14,14,14,14,11,1,14,14,14,14,14,14,2,0,2,0,2,43,46,44,2,2,2,3,2,15,3,2,2,16,46,11,2,2,2,2,2,2,17,2,2,2,17,2,2,45,51,2,2,2,0,15,0,0,0,11,39,2,2,0,2,11,11,2,18,52,53,18,54,15,16,0,11,11,0,2,3,2,2,2,2,11,2,2,11,2,19,19,19,19,19,19,19,19,11,2,46,19,19,19,19,19,19,11,2,43,46,43,46,43,46,11,11,55,56,57,58,59,60,0,16,0,17,17,0,0,0,0,27,0,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,42,42,42,42,42,42,42,42,42,42,0,0,0,42,42,42,42,42,42,42,42,42,2,61,2,2,2,2,2,2,2,2,2,2,61,61,2,2,2,61,2,2,2,2,2,61,2,61,2,61,2,61,2,2,61,2,61,2,61,2,61,2,61,2,61,2,2,2,2,2,2,61,61,2,2,61,61,2,61,2,2,61,2,61,2,61,2,2,2,61,2,61,2,61,2,61,2,2,2,2,2,2,61,2,61,2,2,61,0,0,15,16,0,15,15,16,0,16,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,9,47,48,49,50,10,0,44,44,0,0,45,45,51,0,0,0,62,63,64,0,0,0,0,18,52,53,18,54,0,0,0,0,0,0,55,56,57,58,59,60,39,0,0,0,39,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,3,0,3,3,3,0,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["bigint",3]],[[]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["bigint",3]]],[[["u32",15]]],[[["isize",15]]],[[["u16",15]]],[[["i64",15]]],[[["i128",15]]],[[["u128",15]]],[[["i16",15]]],[[["i32",15]]],[[["u64",15]]],[[["usize",15]]],[[["i8",15]]],[[["u8",15]]],[[["bigint",3]]],[[["usize",15]]],[[["biguint",3]]],[[["u64",15]]],[[["u16",15]]],[[["u32",15]]],[[["u8",15]]],[[["u128",15]]],[[["biguint",3]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["sign",4]]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],null,[[["u64",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[],["u64",15]],[[],["u64",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["biguint",3]],[[],["biguint",3]],[[],["complex",3]],[[]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[["usize",15]],["option",4]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[]],[[],["fpcategory",4]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[["bigint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[["bigint",3]],["ordering",4]],[[["biguint",3]],["ordering",4]],null,[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["u32",15]],[[],["u64",15]],[[],["u32",15]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[["usize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["isize",15]]],[[["u64",15]]],[[["u16",15]]],[[["i8",15]]],[[["bigint",3]]],[[["u8",15]]],[[["i32",15]]],[[["bigint",3]]],[[["u32",15]]],[[["usize",15]]],[[["u128",15]]],[[["i128",15]]],[[["i16",15]]],[[["i64",15]]],[[["biguint",3]]],[[["usize",15]]],[[["u128",15]]],[[["u16",15]]],[[["u64",15]]],[[["u8",15]]],[[["u32",15]]],[[["biguint",3]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[]],[[]],[[["bigint",3]]],[[["biguint",3]]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["complex",3]],["bool",15]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[],["extendedgcd",3]],[[["bigint",3]]],[[]],[[["complex",3]],["complex",3]],[[],["complex",3]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],["option",4]],[[["i64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["isize",15]],["bigint",3]],[[]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[],[["complex",3],["option",4]]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[["biguint",3],["sign",4]],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["f32",15]],["option",4]],[[["f32",15]],[["complex",3],["option",4]]],[[["f64",15]],[["bigint",3],["option",4]]],[[["f64",15]],[["option",4],["biguint",3]]],[[["f64",15]],["option",4]],[[["f64",15]],[["complex",3],["option",4]]],[[["i128",15]],[["bigint",3],["option",4]]],[[["i128",15]],[["option",4],["biguint",3]]],[[["i128",15]],["option",4]],[[["i128",15]],[["complex",3],["option",4]]],[[["i16",15]],["option",4]],[[["i16",15]],[["complex",3],["option",4]]],[[["i32",15]],["option",4]],[[["i32",15]],[["complex",3],["option",4]]],[[["i64",15]],["option",4]],[[["i64",15]],[["bigint",3],["option",4]]],[[["i64",15]],[["option",4],["biguint",3]]],[[["i64",15]],[["complex",3],["option",4]]],[[["i8",15]],["option",4]],[[["i8",15]],[["complex",3],["option",4]]],[[["isize",15]],["option",4]],[[["isize",15]],[["complex",3],["option",4]]],[[]],[[],["complex",3]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[["u32",15]],[["option",4],["biguint",3]]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[["u32",15]],[["option",4],["biguint",3]]],[[],["bigint",3]],[[],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["str",15]],[["parsebiginterror",3],["bigint",3],["result",4]]],[[["str",15]],[["biguint",3],["result",4],["parsebiginterror",3]]],[[["str",15]],[["result",4],["complex",3]]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],[["parsebiginterror",3],["bigint",3],["result",4]]],[[["u32",15],["str",15]],[["biguint",3],["result",4],["parsebiginterror",3]]],[[["u32",15],["str",15]],[["result",4],["complex",3]]],[[["u128",15]],[["bigint",3],["option",4]]],[[["u128",15]],[["option",4],["biguint",3]]],[[["u128",15]],["option",4]],[[["u128",15]],[["complex",3],["option",4]]],[[["u16",15]],["option",4]],[[["u16",15]],[["complex",3],["option",4]]],[[["u32",15]],["option",4]],[[["u32",15]],[["complex",3],["option",4]]],[[["u64",15]],["option",4]],[[["u64",15]],[["bigint",3],["option",4]]],[[["u64",15]],[["option",4],["biguint",3]]],[[["u64",15]],[["complex",3],["option",4]]],[[["u8",15]],["option",4]],[[["u8",15]],[["complex",3],["option",4]]],[[["usize",15]],["option",4]],[[["usize",15]],[["complex",3],["option",4]]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["u32digits",3]],[[],["u32digits",3]],[[],["u64digits",3]],[[],["u64digits",3]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[],["u32",15]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["biguint",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[["i128",15]]],[[["u16",15]]],[[["bigint",3]]],[[["usize",15]]],[[["bigint",3]]],[[["isize",15]]],[[["u32",15]]],[[["u128",15]]],[[["i8",15]]],[[["i16",15]]],[[["u64",15]]],[[["i32",15]]],[[["u8",15]]],[[["i64",15]]],[[["u128",15]]],[[["u32",15]]],[[["u8",15]]],[[["biguint",3]]],[[["usize",15]]],[[["biguint",3]]],[[["u64",15]]],[[["u16",15]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[["complex",3]],["bool",15]],[[],["bigint",3]],[[]],[[]],[[]],[[["vec",3],["sign",4],["u32",15],["global",3]],["bigint",3]],[[["u32",15],["vec",3],["global",3]],["biguint",3]],[[],["complex",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[]],[[]],[[],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[["u32",15]],[["bigint",3],["option",4]]],[[["u32",15]],[["option",4],["biguint",3]]],[[["bigint",3]],[["ordering",4],["option",4]]],[[["biguint",3]],[["ordering",4],["option",4]]],null,[[["usize",15]]],[[["u32",15]]],[[["u16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["f64",15]]],[[["complex",3]]],[[["f64",15]]],[[["f32",15]]],[[["complex",3]]],[[["f32",15]]],[[["complex",3]],["complex",3]],[[]],[[],["complex",3]],[[["i32",15]]],[[["i32",15]],["complex",3]],[[["u32",15]],["complex",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[],["complex",3]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],null,null,[[]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["u128",15]]],[[["i64",15]]],[[["i16",15]]],[[["isize",15]]],[[["u16",15]]],[[["u8",15]]],[[["i128",15]]],[[["bigint",3]]],[[["u64",15]]],[[["i8",15]]],[[["u32",15]]],[[["usize",15]]],[[["bigint",3]]],[[["i32",15]]],[[["biguint",3]]],[[["u128",15]]],[[["biguint",3]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]],[[["u16",15]]],[[["u32",15]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["complex",3]],[[["bool",15],["u64",15]]],[[["bool",15],["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u64",15]]],[[["u64",15]]],[[["i128",15]]],[[["i64",15]]],[[["i128",15]]],[[["isize",15]]],[[["i16",15]]],[[["i8",15]]],[[["u128",15]]],[[["u128",15]]],[[["usize",15]]],[[["i8",15]]],[[["usize",15]]],[[["i32",15]]],[[["u32",15]]],[[["i16",15]]],[[["u8",15]]],[[["i64",15]]],[[["i32",15]]],[[["u32",15]]],[[["isize",15]]],[[["u16",15]]],[[["u8",15]]],[[["u16",15]]],[[["u128",15]]],[[["isize",15]]],[[["u8",15]]],[[["i64",15]]],[[["i16",15]]],[[["isize",15]]],[[["u64",15]]],[[["u128",15]]],[[["i32",15]]],[[["i8",15]]],[[["u16",15]]],[[["i64",15]]],[[["u8",15]]],[[["usize",15]]],[[["i128",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15]]],[[["i16",15]]],[[["i32",15]]],[[["u32",15]]],[[["i8",15]]],[[["i128",15]]],[[["u16",15]]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u8",15]]],[[["u32",15]]],[[["i32",15]]],[[["u16",15]]],[[["i32",15]]],[[["i128",15]]],[[["i64",15]]],[[["i16",15]]],[[["isize",15]]],[[["u16",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]],[[["i8",15]]],[[["u32",15]]],[[["i8",15]]],[[["i64",15]]],[[["isize",15]]],[[["u128",15]]],[[["i128",15]]],[[["usize",15]]],[[["u128",15]]],[[["u64",15]]],[[["i16",15]]],[[["isize",15]]],[[["i64",15]]],[[["isize",15]]],[[["usize",15]]],[[["i64",15]]],[[["u128",15]]],[[["u64",15]]],[[["i32",15]]],[[["u64",15]]],[[["i8",15]]],[[["u32",15]]],[[["u128",15]]],[[["u16",15]]],[[["usize",15]]],[[["i128",15]]],[[["i128",15]]],[[["u8",15]]],[[["u8",15]]],[[["u32",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i16",15]]],[[["u16",15]]],[[],["sign",4]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["bigint",3]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["biguint",3]],[[],["biguint",3]],[[],["complex",3]],[[["i128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["u16",15]]],[[["i128",15]]],[[["i64",15]]],[[["i8",15]]],[[["u64",15]]],[[["bigint",3]]],[[["u128",15]]],[[["bigint",3]]],[[["u32",15]]],[[["i16",15]]],[[["i32",15]]],[[["u8",15]]],[[["usize",15]]],[[["isize",15]]],[[["u32",15]]],[[["u16",15]]],[[["u64",15]]],[[["usize",15]]],[[["u8",15]]],[[["biguint",3]]],[[["u128",15]]],[[["biguint",3]]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],[["bigint",3],["option",4]]],[[],[["bigint",3],["option",4]]],[[],[["option",4],["biguint",3]]],[[],[["option",4],["biguint",3]]],[[],[["option",4],["biguint",3]]],[[]],[[],[["vec",3],["u8",15],["global",3]]],[[]],[[],[["vec",3],["u8",15],["global",3]]],[[]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["isize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],[["vec",3],["u8",15],["global",3]]],[[["u32",15]]],[[["u32",15]],[["vec",3],["u8",15],["global",3]]],[[],[["vec",3],["u8",15],["global",3]]],[[],[["vec",3],["u8",15],["global",3]]],[[["u32",15]],["string",3]],[[["u32",15]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u32",15]]],[[]],[[],[["u32",15],["vec",3],["global",3]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[]],[[],[["vec",3],["u64",15],["global",3]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["u64",15]],[[],["u32",15]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],null,[[]],[[],["result",4]],[[["i8",15]],[["result",4],["biguint",3],["tryfrombiginterror",3]]],[[["i128",15]],[["result",4],["biguint",3],["tryfrombiginterror",3]]],[[["i64",15]],[["result",4],["biguint",3],["tryfrombiginterror",3]]],[[],["result",4]],[[["bigint",3]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["bigint",3]],[["result",4],["biguint",3],["tryfrombiginterror",3]]],[[["i16",15]],[["result",4],["biguint",3],["tryfrombiginterror",3]]],[[["isize",15]],[["result",4],["biguint",3],["tryfrombiginterror",3]]],[[["i32",15]],[["result",4],["biguint",3],["tryfrombiginterror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["complex",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sign",4]],[[],["parsebiginterror",3]],[[],["tryfrombiginterror",3]],[[]],[[]],[[]],[[["sign",4]],["ordering",4]],[[],["usize",15]],[[],["usize",15]],[[],["str",15]],[[],["str",15]],[[["sign",4]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],["usize",15]],[[],["usize",15]],[[["sign",4]],["sign",4]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[],["sign",4]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[["usize",15]],[["option",4],["u64",15]]],[[["sign",4]],[["ordering",4],["option",4]]],[[]],[[]],[[],[["bigint",3],["option",4]]],[[],[["option",4],["biguint",3]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],null,null,null,null,[[]],[[]],[[],["str",15]],[[["parsecomplexerror",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],null,[[]],[[["parsecomplexerror",3]],["bool",15]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],[[],["rangefrom",3]],[[],["rangestepfrom",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["rangefrom",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepfrom",3]],[[],["rangestepinclusive",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["usize",15]],["option",4]],[[["usize",15]]],[[]],null,null,null,null,null,null,[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[],[["option",4],["ratio",3]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[],["ratio",3]],[[],["parseratioerror",3]],[[]],[[]],[[["ratio",3]],["ordering",4]],[[]],[[],["str",15]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[["ratio",3]],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[],[["ratio",3],["option",4]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["ratio",3],["option",4]]],[[],["ratio",3]],[[["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[["u32",15],["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[["ratio",3]],[["ordering",4],["option",4]]],[[["usize",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["biguint",3]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["bigint",3]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["biguint",3]],["ratio",3]],[[["bigint",3]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["ratio",3]],[[],["ratio",3]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i64",15],["option",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],["ratio",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["ratio",3]],null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,[[]],null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],null,[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["u32",15]]],[[]],[[]],[[["i32",15]]],null,[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[]],[[]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[],["u32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],null,[[]],[[]],null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["usize",15]],["option",4]],[[["usize",15]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]]],"p":[[8,"Num"],[8,"Float"],[8,"Signed"],[3,"BigInt"],[3,"Complex"],[3,"BigUint"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"PrimInt"],[8,"Integer"],[8,"NumCast"],[8,"FromPrimitive"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"Saturating"],[8,"ToPrimitive"],[4,"Sign"],[3,"U32Digits"],[3,"U64Digits"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[8,"ToBigInt"],[8,"ToBigUint"],[8,"AsPrimitive"],[3,"ParseComplexError"],[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[8,"Pow"],[3,"Ratio"],[3,"ParseRatioError"],[8,"FloatConst"],[4,"FloatErrorKind"],[8,"Inv"],[8,"MulAdd"],[3,"ParseFloatError"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"MulAddAssign"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"]]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: …","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","eq","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","neg","new","new","next","next","next_multiple_of","next_multiple_of","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero"],"q":["num_bigintd":["A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>…","Determines the fewest bits necessary to express the …","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in…","Creates and initializes a <code>BigInt</code> from an array of bytes …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","","","","","","","","","","Extract the original value, if available. The value will …","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the …","Sets or clears the bit in the given positioneturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","","Returns the truncated principal square root of <code>self</code> – …","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in …","Returns the integer in the requested base in …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are …","Returns the number of least-significant bits that are …","Returns the number of least-significant bits that are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,2,3,3,2,2,3,3,2,2,3,3,2,2,3,3,2,3,2,2,3,3,2,2,3,3,2,4,5,3,1,6,7,2,4,5,3,1,6,7,2,2,3,3,2,2,3,2,2,3,2,2,3,2,2,3,2,3,1,6,7,2,3,2,3,1,6,7,2,3,1,4,5,3,2,3,6,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,1,6,7,2,2,2,2,2,2,2,3,3,3,3,3,3,1,6,6,7,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,5,3,3,3,3,3,3,3,1,6,7,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,2,4,5,3,1,6,7,4,5,7,2,2,3,2,3,2,2,3,2,3,2,2,3,2,3,2,3,4,5,2,3,4,5,2,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,6,7,2,1,2,3,4,5,2,3,2,5,2,2,3,3,2,3,2,3,2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,4,5,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,8,2,3,9,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,6,7,2,3,2,3,2,2,2,3,2,3,6,7,2,3,2,3,2,3,2,3,3,2,3,2,4,5,3,3,3,3,3,3,3,3,3,1,6,7,2,4,5,3,1,6,7,2,4,5,3,1,6,7,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i64",15]]],[[["u8",15]]],[[["bigint",3]]],[[["i128",15]]],[[["u16",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["i32",15]]],[[["bigint",3]]],[[["biguint",3]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["usize",15]]],[[["u16",15]]],[[["u8",15]]],[[["biguint",3]]],[[["sign",4]]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[],["u64",15]],[[],["u64",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[]],[[]],[[],["sign",4]],[[],["parsebiginterror",3]],[[],["tryfrombiginterror",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],["ordering",4]],[[["biguint",3]],["ordering",4]],[[["sign",4]],["ordering",4]],[[],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[],["bigint",3]],[[],["biguint",3]],[[],["str",15]],[[],["str",15]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i128",15]]],[[["i32",15]]],[[["bigint",3]]],[[["i64",15]]],[[["bigint",3]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["u64",15]]],[[["u128",15]]],[[["u32",15]]],[[["usize",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u8",15]]],[[["u16",15]]],[[]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["sign",4]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[["bigint",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["i8",15]]],[[["i32",15]]],[[["i64",15]]],[[["isize",15]]],[[["i128",15]]],[[]],[[["biguint",3]]],[[["u64",15]]],[[["u128",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["usize",15]]],[[["i16",15]]],[[]],[[]],[[["u32",15]]],[[["usize",15]]],[[["u16",15]]],[[]],[[["u64",15]]],[[["u128",15]]],[[["u8",15]]],[[]],[[]],[[]],[[["biguint",3],["sign",4]],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["f64",15]],[["bigint",3],["option",4]]],[[["f64",15]],[["biguint",3],["option",4]]],[[["i128",15]],[["bigint",3],["option",4]]],[[["i128",15]],[["biguint",3],["option",4]]],[[["i64",15]],[["bigint",3],["option",4]]],[[["i64",15]],[["biguint",3],["option",4]]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[],["bigint",3]],[[],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["str",15]],[["result",4],["parsebiginterror",3],["bigint",3]]],[[["str",15]],[["result",4],["biguint",3],["parsebiginterror",3]]],[[["u32",15],["str",15]],[["result",4],["parsebiginterror",3],["bigint",3]]],[[["u32",15],["str",15]],[["result",4],["biguint",3],["parsebiginterror",3]]],[[["u128",15]],[["bigint",3],["option",4]]],[[["u128",15]],[["biguint",3],["option",4]]],[[["u64",15]],[["bigint",3],["option",4]]],[[["u64",15]],[["biguint",3],["option",4]]],[[["bigint",3]],["bigint",3]],[[]],[[["bigint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32digits",3]],[[],["u32digits",3]],[[],["u64digits",3]],[[],["u64digits",3]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[],["usize",15]],[[],["usize",15]],[[],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["sign",4]],["sign",4]],[[["bigint",3]]],[[["u128",15]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["i32",15]]],[[["i64",15]]],[[["i128",15]]],[[["bigint",3]]],[[["i8",15]]],[[["usize",15]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["u16",15]]],[[["u8",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u32",15]]],[[["u128",15]]],[[["u64",15]]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[],["bigint",3]],[[],["sign",4]],[[["vec",3],["u32",15],["sign",4]],["bigint",3]],[[["u32",15],["vec",3]],["biguint",3]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[]],[[]],[[],["bigint",3]],[[["usize",15]],[["option",4],["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],["bigint",3]],[[],["biguint",3]],[[["u32",15]],[["bigint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[["bigint",3]],[["option",4],["ordering",4]]],[[["biguint",3]],[["option",4],["ordering",4]]],[[["sign",4]],[["ordering",4],["option",4]]],[[["u32",15]]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]]],[[["u128",15]],["biguint",3]],[[]],[[]],[[]],[[]],[[["i32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i64",15]]],[[["u32",15]]],[[["i128",15]]],[[["i32",15]]],[[["u128",15]]],[[["u64",15]]],[[["bigint",3]]],[[["bigint",3]]],[[["u16",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u8",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["bool",15],["u64",15]]],[[["bool",15],["u64",15]]],[[]],[[]],[[]],[[]],[[["u16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]]],[[["i64",15]]],[[["i128",15]]],[[["i128",15]]],[[["isize",15]]],[[["isize",15]]],[[["i8",15]]],[[["i8",15]]],[[["i16",15]]],[[["i16",15]]],[[["i32",15]]],[[["i32",15]]],[[["i64",15]]],[[["usize",15]]],[[["u128",15]]],[[["u128",15]]],[[["u64",15]]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u16",15]]],[[["u16",15]]],[[["u8",15]]],[[["u8",15]]],[[["u16",15]]],[[["isize",15]]],[[["isize",15]]],[[["i128",15]]],[[["i128",15]]],[[["i64",15]]],[[["i64",15]]],[[["i32",15]]],[[["i32",15]]],[[["i16",15]]],[[["i16",15]]],[[["i8",15]]],[[["i8",15]]],[[["usize",15]]],[[["usize",15]]],[[["u128",15]]],[[["u128",15]]],[[["u16",15]]],[[["u8",15]]],[[["u8",15]]],[[["u64",15]]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i8",15]]],[[["i128",15]]],[[["u16",15]]],[[["usize",15]]],[[["u8",15]]],[[["u128",15]]],[[["isize",15]]],[[["isize",15]]],[[["i64",15]]],[[["u64",15]]],[[["i16",15]]],[[["u16",15]]],[[["u8",15]]],[[["i128",15]]],[[["i64",15]]],[[["i32",15]]],[[["i32",15]]],[[["usize",15]]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u128",15]]],[[["i16",15]]],[[["i8",15]]],[[["i8",15]]],[[["u128",15]]],[[["u8",15]]],[[["u16",15]]],[[["u16",15]]],[[["u8",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["isize",15]]],[[["isize",15]]],[[["i128",15]]],[[["i128",15]]],[[["i64",15]]],[[["i64",15]]],[[["i32",15]]],[[["i32",15]]],[[["i16",15]]],[[["i16",15]]],[[["i8",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["u128",15]]],[[],["sign",4]],[[],["bigint",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["bigint",3]]],[[["u8",15]]],[[["i8",15]]],[[["i128",15]]],[[["i64",15]]],[[["i32",15]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["isize",15]]],[[["i16",15]]],[[["bigint",3]]],[[["usize",15]]],[[["u16",15]]],[[["u64",15]]],[[["usize",15]]],[[["u16",15]]],[[["u8",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u128",15]]],[[["u32",15]]],[[]],[[]],[[],[["bigint",3],["option",4]]],[[],[["bigint",3],["option",4]]],[[],[["bigint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[]],[[],[["vec",3],["u8",15]]],[[]],[[],[["vec",3],["u8",15]]],[[],[["f32",15],["option",4]]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],[["vec",3],["u8",15]]],[[["u32",15]]],[[["u32",15]],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[["u32",15]],["string",3]],[[["u32",15]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[]],[[],[["u32",15],["vec",3]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[]],[[],[["u64",15],["vec",3]]],[[],["u64",15]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["bigint",3]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["i64",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["isize",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["i8",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["i32",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["i16",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["i128",15]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["bigint",3]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bigint",3]],[[],["biguint",3]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[3,"U32Digits"],[3,"U64Digits"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[8,"ToBigInt"],[8,"ToBigUint"]]},\
"num_complex":{"doc":"Complex numbers.","tn":["Complex","Complex32","Complex64","ParseComplexError","acos","acosh","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","as_","asin","asinh","atan","atanh","borrow","borrow","borrow_mut","borrow_mut","cbrt","clone","clone_into","conj","cos","cosh","default","description","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","exp","expf","fdiv","finv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","into","into","inv","inv","is_finite","is_infinite","is_nan","is_normal","is_one","is_zero","l1_norm","ln","log","mul","mul","mul","mul","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","new","norm","norm_sqr","one","pow","pow","pow","pow","pow","pow","powc","powf","powi","powu","product","product","re","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sin","sinh","sqrt","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A complex number in Cartesian form.","","","","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","Calculate the principal Arg of self.","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of the inverse tangent of …","Computes the principal value of inverse hyperbolic …","","","","","Computes the principal value of the cube root of <code>self</code>.","","","Returns the complex conjugate. i.e. <code>re - i im</code>","Computes the cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Raises a floating point number to the complex power <code>self</code>.","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","","","","","","","","","","","","","","Convert a polar representation into a complex number.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Imaginary portion of the complex number","","","Returns <code>1/self</code>","","Checks if the given complex number is finite","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","Computes the principal value of natural logarithm of <code>self</code>.","Returns the logarithm of <code>self</code> with respect to an …","","","","","","","","","","","","","","","Create a new Complex","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Computes the sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","Computes the tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,1,2,1,1],"f":[null,null,null,null,[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[],["str",15]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[]],[[]],[[["complex",3]],["complex",3]],[[],["complex",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["toprimitive",8]],["option",4]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["f64",15]]],[[["f64",15]]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["i32",15]]],[[["u32",15]]],[[]],[[]],null,[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal <code>n</code>th root of an integer –…","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,2,3,2,3,0,4,4,3,3,0,5,0,5,0,5,0,5,5,3,5,5,3,2,3,0,5,3,0,5,2,3,2,5,5,5,0,5,0,5,0,3,2,2,5,0,4,5,0,4,4,3,2,3,2,3,2,3,3,3],"f":[null,null,null,null,null,[[["average",8]],["average",8]],[[]],[[["average",8]],["average",8]],[[]],[[["integer",8],["clone",8]],[["integer",8],["clone",8]]],[[]],[[]],[[]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]]],[[]],[[["integer",8]]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integer",8]],["integer",8]],[[]],null,[[["integer",8]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[],[["integer",8],["clone",8]]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15],["roots",8]],["roots",8]],[[["u32",15]]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":[3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["num_iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,0,0,0,0,0,0,1,2,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],[[],["rangefrom",3]],[[],["rangestepfrom",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["rangefrom",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepfrom",3]],[[],["rangestepinclusive",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"]]},\
"num_rational":{"doc":"Rational numbers","tn":["BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","description","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,2,1,2,1,2,1],"f":[null,null,null,null,null,null,[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[["numcast",8],["floatcore",8]],[["option",4],["ratio",3]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[],["ratio",3]],[[],["parseratioerror",3]],[[]],[[]],[[],["ordering",4]],[[]],[[],["str",15]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["floatcore",8]],[["option",4],["bigrational",6]]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[],["ratio",3]],[[["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[["u32",15],["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],[["ordering",4],["option",4]]],[[["u128",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["biguint",3]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["biguint",3]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["bigint",3]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["bigint",3]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i64",15],["option",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u64",15]]],[[],["ratio",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["ratio",3]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[13,4,16,13,8,8,8,8,8,8,3,8,11,11,11,11,0,0,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,0,0,0,0,11,11,11,11,11,11,11,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["Empty","FloatErrorKind","FromStrRadixErr","Invalid","Num","NumAssign","NumAssignOps","NumAssignRef","NumOps","NumRef","ParseFloatError","RefNum","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","ops","pow","real","sign","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","The trait for references which implement numeric …","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","","","Convert from a string and radix (typically <code>2..=36</code>).","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have…","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[1,0,2,1,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,0,3,1,3,1,3,1,3,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,0,9,9,9,9,9,9,9,9,9,10,11,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,11,10,10,10,10,10,11,10,11,10,11,10,11,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,11,10,10,11,11,10,11,10,10,11,10,11,10,11,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,11,10,10,11,0,0,12,13,0,12,12,13,0,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,21,22,0,23,23,0,0,24,24,25,0,0,0,26,27,28,0,0,0,0,29,30,31,29,32,0,0,0,0,0,0,33,34,35,36,37,38,39,0,0,0,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,41,0,41,41,41,0,41],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],null,null,[[]],[[]],null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],[["option",4],["numcast",8]]],[[["toprimitive",8]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["one",8]],[[]],[[]],[[]],[[],["zero",8]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["one",8],["usize",15],["checkedmul",8],["clone",8]],[["one",8],["option",4],["checkedmul",8],["clone",8]]],[[["one",8],["mul",8],["usize",15],["clone",8]],[["mul",8],["one",8],["clone",8]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["signed",8]],["signed",8]],[[]],[[["signed",8]],["signed",8]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"],[8,"Signed"]]},\
"priority_queue":{"doc":"This crate provide a priority queue backed by an hashmap …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["PriorityQueue","append","borrow","borrow_mut","capacity","change_priority","change_priority_by","clear","clone","clone_into","default","eq","equivalent","extend","fmt","from","from","from_iter","get","get_mut","get_priority","into","into_iter","into_sorted_iter","into_sorted_vec","into_vec","is_empty","iter","iter_mut","len","new","peek","peek_mut","pop","push","push_decrease","push_increase","remove","reserve","shrink_to_fit","to_owned","try_from","try_into","type_id","with_capacity","with_capacity_and_default_hasher","with_capacity_and_hasher","with_default_hasher","with_hasher"],"q":["priority_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A priority queue with efficient change function to change …","Move all items of the <code>other</code> queue to <code>self</code> ignoring the …","","","Returns the number of elements the internal map can hold …","Change the priority of an Item returning the old value of …","Change the priority of an Item using the provided …","Drops all items from the priority queue","","","","","","","","","","","Get the couple (item, priority) of an arbitrary element, …","Get the couple (item, priority) of an arbitrary element, …","Get the priority of an item, or <code>None</code>, if the item is not …","","","Generates a new iterator from self that will extract the …","Implements a HeapSort","Returns the items not ordered","Returns true if the priority queue contains no elements.","Returns an iterator in arbitrary order over the (item, …","Return an iterator in arbitrary order over the (item, …","Returns the number of elements in the priority queue.","Creates an empty <code>PriorityQueue</code>","Returns the couple (item, priority) with the greatest …","Returns the couple (item, priority) with the greatest …","Removes the item with the greatest priority from the …","Insert the item-priority pair into the queue.","Decrease the priority of an existing item in the queue, or…","Increase the priority of an existing item in the queue, or…","Remove an arbitrary element from the priority queue. …","Reserves capacity for at least <code>additional</code> more elements …","Shrinks the capacity of the internal data structures that …","","","","","Creates an empty <code>PriorityQueue</code> with the specified …","Creates an empty <code>PriorityQueue</code> with the specified …","Creates an empty <code>PriorityQueue</code> with the specified …","Creates an empty <code>PriorityQueue</code> with the default hasher","Creates an empty <code>PriorityQueue</code> with the specified hasher"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[],["usize",15]],[[],["option",4]],[[]],[[]],[[],["priorityqueue",3]],[[]],[[]],[[["priorityqueue",3]],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[]],[[["vec",3]]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["intoiter",3]],[[],["intosortediter",3]],[[],["vec",3]],[[],["vec",3]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]]],"p":[[3,"PriorityQueue"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};